<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Return Types and Void Functions</title>
      <link href="/2023/11/27/Return-Types-and-Void-Functions/"/>
      <url>/2023/11/27/Return-Types-and-Void-Functions/</url>
      
        <content type="html"><![CDATA[<h4 id="Return-Types-and-Void-Functions"><a href="#Return-Types-and-Void-Functions" class="headerlink" title="Return Types and Void Functions:"></a>Return Types and Void Functions:</h4><p>a. Define a function calculateArea that takes the radius of a circle as a parameter and returns the area of the circle.<br>b. Write a function divideNumbers that takes two doubles as parameters and returns the result of their division.<br>c. Create a function printRectangle that takes two integers (width and height) as parameters and prints a rectangle of asterisks. The function should be of type void.<br>d. Define a function findRoots that takes three parameters (a, b, c) representing a quadratic equation. Return the roots of the equation (use the quadratic formula). If there are no real roots, return an error message.<br>e. Write a function displayMessage that takes a string as a parameter and displays it on the screen. The function should have a return type of void.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a. Calculate the area of a circle</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculateArea</span><span class="params">(<span class="type">double</span> radius)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b. Divide two numbers</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">divideNumbers</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error: Division by zero.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Returning 0 as an error indicator; you may choose a different approach</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. Print a rectangle of asterisks</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printRectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d. Find roots of a quadratic equation</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findRoots</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> discriminant = b * b - <span class="number">4</span> * a * c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (discriminant &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">double</span> root1 = (-b + <span class="built_in">sqrt</span>(discriminant)) / (<span class="number">2</span> * a);</span><br><span class="line">        <span class="type">double</span> root2 = (-b - <span class="built_in">sqrt</span>(discriminant)) / (<span class="number">2</span> * a);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Root 1: &quot;</span> &lt;&lt; root1 &lt;&lt; <span class="string">&quot;\nRoot 2: &quot;</span> &lt;&lt; root2 &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (discriminant == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">double</span> root = -b / (<span class="number">2</span> * a);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Double root: &quot;</span> &lt;&lt; root &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;No real roots.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// e. Display a message</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayMessage</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Example usages of the functions</span></span><br><span class="line">    <span class="type">double</span> circleRadius = <span class="number">5.0</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Area of circle with radius &quot;</span> &lt;&lt; circleRadius &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">calculateArea</span>(circleRadius) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> dividend = <span class="number">10.0</span>, divisor = <span class="number">2.0</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Division result: &quot;</span> &lt;&lt; <span class="built_in">divideNumbers</span>(dividend, divisor) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rectangleWidth = <span class="number">4</span>, rectangleHeight = <span class="number">3</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Rectangle of asterisks:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">printRectangle</span>(rectangleWidth, rectangleHeight);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> quadraticA = <span class="number">1.0</span>, quadraticB = <span class="number">-3.0</span>, quadraticC = <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">findRoots</span>(quadraticA, quadraticB, quadraticC);</span><br><span class="line"></span><br><span class="line">    std::string message = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">    <span class="built_in">displayMessage</span>(message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Passing Arguments</title>
      <link href="/2023/11/27/Passing-Arguments/"/>
      <url>/2023/11/27/Passing-Arguments/</url>
      
        <content type="html"><![CDATA[<h4 id="Passing-Arguments-By-Value-By-Reference"><a href="#Passing-Arguments-By-Value-By-Reference" class="headerlink" title="Passing Arguments (By Value, By Reference):"></a>Passing Arguments (By Value, By Reference):</h4><p>a. Write a function incrementByValue that takes an integer parameter and increments it by 1. Call the function and observe the changes.<br>b. Create a function multiplyByTwo that takes a reference to an integer as a parameter and multiplies it by 2. Print the result.<br>c. Define a function swapValues that takes two integers by reference and swaps their values. Print the values before and after swapping.<br>d. Write a function modifyArray that takes an array of doubles and its size as parameters. Multiply each element by 1.5 and print the modified array.<br>e. Create a function appendText that takes a reference to a string and appends “ (Modified)” to it. Print the modified string.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a. Increment an integer by value</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">incrementByValue</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b. Multiply an integer by two using reference</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">multiplyByTwo</span><span class="params">(<span class="type">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">    num *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. Swap values of two integers using reference</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapValues</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Before swapping: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After swapping: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d. Modify each element of an array of doubles</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyArray</span><span class="params">(<span class="type">double</span> arr[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        arr[i] *= <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// e. Append text to a string using reference</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">appendText</span><span class="params">(std::string &amp;text)</span> </span>&#123;</span><br><span class="line">    text += <span class="string">&quot; (Modified)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a. Increment by value</span></span><br><span class="line">    <span class="type">int</span> numA = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">incrementByValue</span>(numA);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After incrementByValue: &quot;</span> &lt;&lt; numA &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b. Multiply by two using reference</span></span><br><span class="line">    <span class="type">int</span> numB = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">multiplyByTwo</span>(numB);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After multiplyByTwo: &quot;</span> &lt;&lt; numB &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c. Swap values using reference</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swapValues</span>(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d. Modify array of doubles</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> arraySize = <span class="number">3</span>;</span><br><span class="line">    <span class="type">double</span> arr[arraySize] = &#123;<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>&#125;;</span><br><span class="line">    <span class="built_in">modifyArray</span>(arr, arraySize);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Modified Array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arraySize; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// e. Append text to a string using reference</span></span><br><span class="line">    std::string text = <span class="string">&quot;Original Text&quot;</span>;</span><br><span class="line">    <span class="built_in">appendText</span>(text);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Modified Text: &quot;</span> &lt;&lt; text &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Intro Pointers and Their Role:</title>
      <link href="/2023/11/27/Intro-Pointers-and-Their-Role/"/>
      <url>/2023/11/27/Intro-Pointers-and-Their-Role/</url>
      
        <content type="html"><![CDATA[<h4 id="Introduction-to-Pointers-and-Their-Role"><a href="#Introduction-to-Pointers-and-Their-Role" class="headerlink" title="Introduction to Pointers and Their Role:"></a>Introduction to Pointers and Their Role:</h4><p>a. Declare a pointer variable to an integer named ptr.<br>b. Assign the address of an integer variable to the pointer ptr.<br>c. Use the pointer to modify the value of the integer variable.<br>d. Create a pointer to an array and access its elements.<br>e. Write a function that takes a pointer to an integer and doubles its value</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e. Write a function that takes a pointer to an integer and doubles its value.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doubleValue</span><span class="params">(<span class="type">int</span>* ptr)</span> </span>&#123;</span><br><span class="line">    *ptr *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a. Declare a pointer variable to an integer named ptr.</span></span><br><span class="line">    <span class="type">int</span>* ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b. Assign the address of an integer variable to the pointer ptr.</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">42</span>;</span><br><span class="line">    ptr = &amp;number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c. Use the pointer to modify the value of the integer variable.</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Original value: &quot;</span> &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line">    *ptr = <span class="number">99</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Modified value using pointer: &quot;</span> &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d. Create a pointer to an array and access its elements.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> arraySize = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> intArray[arraySize] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* arrayPtr = intArray;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Accessing elements of the array using a pointer:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arraySize; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Element &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; *(arrayPtr + i) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// e. Call the function to double the value using a pointer.</span></span><br><span class="line">    <span class="type">int</span> valueToDouble = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span>* valuePtr = &amp;valueToDouble;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nOriginal value before function call: &quot;</span> &lt;&lt; valueToDouble &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">doubleValue</span>(valuePtr);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value after doubling using function: &quot;</span> &lt;&lt; valueToDouble &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array Manipulation and Traversal</title>
      <link href="/2023/11/27/Array-Manipulation-and-Traversal/"/>
      <url>/2023/11/27/Array-Manipulation-and-Traversal/</url>
      
        <content type="html"><![CDATA[<h4 id="Array-Manipulation-and-Traversal"><a href="#Array-Manipulation-and-Traversal" class="headerlink" title="Array Manipulation and Traversal:"></a>Array Manipulation and Traversal:</h4><p>a. Calculate the average of the scores array.<br>b. Convert all characters in the name to uppercase.<br>c. Find the highest temperature in the temperatures array.<br>d. Print the days of the week in reverse order.<br>e. Transpose the matrix (swap rows and columns).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a. Calculate the average of the scores array.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numScores = <span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> scores[numScores] = &#123;<span class="number">90.5</span>, <span class="number">85.0</span>, <span class="number">92.5</span>, <span class="number">88.0</span>, <span class="number">95.5</span>&#125;;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numScores; ++i) &#123;</span><br><span class="line">        sum += scores[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> average = sum / numScores;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b. Convert all characters in the name to uppercase.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nameSize = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> name[nameSize];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter your name: &quot;</span>;</span><br><span class="line">    std::cin.<span class="built_in">getline</span>(name, nameSize);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(name); ++i) &#123;</span><br><span class="line">        name[i] = <span class="built_in">toupper</span>(name[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c. Find the highest temperature in the temperatures array.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numTemperatures = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> temperatures[numTemperatures];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter temperatures for the week:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numTemperatures; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Day &quot;</span> &lt;&lt; (i + <span class="number">1</span>) &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; temperatures[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxTemperature = temperatures[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numTemperatures; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temperatures[i] &gt; maxTemperature) &#123;</span><br><span class="line">            maxTemperature = temperatures[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the input buffer</span></span><br><span class="line">    std::cin.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d. Print the days of the week in reverse order.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numDays = <span class="number">7</span>;</span><br><span class="line">    std::string daysOfWeek[numDays] = &#123;<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Days of the week in reverse order:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = numDays - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        std::cout &lt;&lt; daysOfWeek[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// e. Transpose the matrix (swap rows and columns).</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numRows = <span class="number">3</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numCols = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> matrix[numRows][numCols];</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter values for the 3x3 matrix:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numCols; ++j) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Matrix[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;][&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;]: &quot;</span>;</span><br><span class="line">            std::cin &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Transpose the matrix</span></span><br><span class="line">    <span class="type">int</span> transposedMatrix[numCols][numRows];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numCols; ++j) &#123;</span><br><span class="line">            transposedMatrix[j][i] = matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output information</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nAverage of Scores: &quot;</span> &lt;&lt; average &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nUppercase Name: &quot;</span> &lt;&lt; name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nHighest Temperature: &quot;</span> &lt;&lt; maxTemperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Declaring and Accessing Arrays</title>
      <link href="/2023/11/27/Declaring-and-Accessing-Arrays/"/>
      <url>/2023/11/27/Declaring-and-Accessing-Arrays/</url>
      
        <content type="html"><![CDATA[<h4 id="Declaring-and-Accessing-Arrays"><a href="#Declaring-and-Accessing-Arrays" class="headerlink" title="Declaring and Accessing Arrays:"></a>Declaring and Accessing Arrays:</h4><p>a. Initialize the scores array with some sample test scores.<br>b. Input the name into the name array using cin.<br>c. Set values in the temperatures array using a loop.<br>d. Initialize the daysOfWeek array with the names of the days.<br>e. Assign values to the elements of the matrix using nested loops.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a. Initialize the scores array with some sample test scores.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numScores = <span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> scores[numScores] = &#123;<span class="number">90.5</span>, <span class="number">85.0</span>, <span class="number">92.5</span>, <span class="number">88.0</span>, <span class="number">95.5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b. Input the name into the name array using cin.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nameSize = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> name[nameSize];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter your name: &quot;</span>;</span><br><span class="line">    std::cin.<span class="built_in">getline</span>(name, nameSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c. Set values in the temperatures array using a loop.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numTemperatures = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> temperatures[numTemperatures];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter temperatures for the week:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numTemperatures; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Day &quot;</span> &lt;&lt; (i + <span class="number">1</span>) &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; temperatures[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the input buffer</span></span><br><span class="line">    std::cin.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d. Initialize the daysOfWeek array with the names of the days.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numDays = <span class="number">7</span>;</span><br><span class="line">    std::string daysOfWeek[numDays] = &#123;<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// e. Assign values to the elements of the matrix using nested loops.</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numRows = <span class="number">3</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> numCols = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> matrix[numRows][numCols];</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter values for the 3x3 matrix:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numCols; ++j) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Matrix[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;][&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;]: &quot;</span>;</span><br><span class="line">            std::cin &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output information</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nScores: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numScores; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; scores[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nName: &quot;</span> &lt;&lt; name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nTemperatures: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numTemperatures; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; temperatures[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nDays of the Week: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numDays; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; daysOfWeek[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nMatrix:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numCols; ++j) &#123;</span><br><span class="line">            std::cout &lt;&lt; matrix[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++ Definition Functions</title>
      <link href="/2023/11/27/c-Definition-Functions/"/>
      <url>/2023/11/27/c-Definition-Functions/</url>
      
        <content type="html"><![CDATA[<h4 id="Definition-and-Declaration-of-Functions"><a href="#Definition-and-Declaration-of-Functions" class="headerlink" title="Definition and Declaration of Functions:"></a>Definition and Declaration of Functions:</h4><p>a. Define a function called greet that prints “Hello, World!” to the console.<br>b. Create a function named calculateSum that takes two integers as parameters and returns their sum.<br>c. Write a function printArray that takes an array of integers and its size as parameters and prints all the elements.<br>d. Define a function findMax that takes two doubles as parameters and returns the larger value.<br>e. Create a function isEven that takes an integer as a parameter and returns true if it’s even, otherwise false.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration (not necessary in this case, as the function is defined above)</span></span><br><span class="line"><span class="comment">// void greet();</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculateSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration (not necessary in this case, as the function is defined above)</span></span><br><span class="line"><span class="comment">// int calculateSum(int a, int b);</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration (not necessary in this case, as the function is defined above)</span></span><br><span class="line"><span class="comment">// void printArray(int arr[], int size);</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">findMax</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration (not necessary in this case, as the function is defined above)</span></span><br><span class="line"><span class="comment">// double findMax(double a, double b);</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration (not necessary in this case, as the function is defined above)</span></span><br><span class="line"><span class="comment">// bool isEven(int num);</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ combined list</title>
      <link href="/2023/11/26/C-combined-list/"/>
      <url>/2023/11/26/C-combined-list/</url>
      
        <content type="html"><![CDATA[<h4 id="Task-4-Combining-Data-Structures"><a href="#Task-4-Combining-Data-Structures" class="headerlink" title="Task 4: Combining Data Structures"></a>Task 4: Combining Data Structures</h4><ol><li>Create a stack of strings named <strong>stringStack</strong>.</li><li>Push at least three strings onto the stack.</li><li>Create a queue of floats named <strong>floatQueue</strong>.</li><li>Enqueue at least two float values into the queue.</li><li>Create a linked list of characters named <strong>charList</strong>.</li><li>Insert at least four characters into the linked list.</li><li>Combine the elements of the stack, queue, and linked list into a new data structure (e.g., another linked list, a stack, or a queue).</li><li>Print the elements of the new data structure.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Create a stack of strings named stringStack.</span></span><br><span class="line">    std::stack&lt;std::string&gt; stringStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Push at least three strings onto the stack.</span></span><br><span class="line">    stringStack.<span class="built_in">push</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    stringStack.<span class="built_in">push</span>(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">    stringStack.<span class="built_in">push</span>(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Create a queue of floats named floatQueue.</span></span><br><span class="line">    std::queue&lt;<span class="type">float</span>&gt; floatQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. Enqueue at least two float values into the queue.</span></span><br><span class="line">    floatQueue.<span class="built_in">push</span>(<span class="number">3.14f</span>);</span><br><span class="line">    floatQueue.<span class="built_in">push</span>(<span class="number">2.718f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. Create a linked list of characters named charList.</span></span><br><span class="line">    std::list&lt;<span class="type">char</span>&gt; charList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. Insert at least four characters into the linked list.</span></span><br><span class="line">    charList.<span class="built_in">push_back</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    charList.<span class="built_in">push_back</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    charList.<span class="built_in">push_back</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    charList.<span class="built_in">push_back</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Combine the elements of the stack, queue, and linked list into a new data structure.</span></span><br><span class="line">    std::list&lt;std::string&gt; combinedList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Combine elements from the stack</span></span><br><span class="line">    <span class="keyword">while</span> (!stringStack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        combinedList.<span class="built_in">push_back</span>(stringStack.<span class="built_in">top</span>());</span><br><span class="line">        stringStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Combine elements from the queue</span></span><br><span class="line">    <span class="keyword">while</span> (!floatQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        combinedList.<span class="built_in">push_back</span>(std::<span class="built_in">to_string</span>(floatQueue.<span class="built_in">front</span>()));</span><br><span class="line">        floatQueue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Combine elements from the linked list</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : charList) &#123;</span><br><span class="line">        combinedList.<span class="built_in">push_back</span>(std::<span class="built_in">string</span>(<span class="number">1</span>, ch));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. Print the elements of the new data structure.</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Combined List: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; element : combinedList) &#123;</span><br><span class="line">        std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ singly linked list</title>
      <link href="/2023/11/25/C-singly-linked-list/"/>
      <url>/2023/11/25/C-singly-linked-list/</url>
      
        <content type="html"><![CDATA[<ol><li>Define a structure for a singly linked list node with an integer value.</li><li>Create a linked list named <strong>intList</strong> with at least five nodes.</li><li>Print the elements of the linked list.</li><li>Implement a function to insert a new node at the end of the linked list.</li><li>Print the updated linked list.</li><li>Implement a function to delete a node with a specific value from the linked list. </li><li>Print the updated linked list.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Define a structure for a singly linked list node with an integer value.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    ListNode* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor to initialize the node</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> value) : <span class="built_in">data</span>(value), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to print the elements of the linked list.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Linked List: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; head-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Implement a function to insert a new node at the end of the linked list.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAtEnd</span><span class="params">(ListNode*&amp; head, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    ListNode* newNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">    newNode-&gt;data = value;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;head: &quot;</span> &lt;&lt; head &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// If the list is empty, the new node becomes the head.</span></span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Traverse the list to find the last node and append the new node.</span></span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;temp-&gt;next: &quot;</span> &lt;&lt;temp-&gt;next &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Implement a function to delete a node with a specific value from the linked list.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(ListNode*&amp; head, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Handle the case where the node to be deleted is the head.</span></span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;data == value) &#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Traverse the list to find the node with the specified value.</span></span><br><span class="line">    ListNode* current = head;</span><br><span class="line">    ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">nullptr</span> &amp;&amp; current-&gt;data != value) &#123;</span><br><span class="line">        prev = current;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the node is found, unlink it from the list and delete it.</span></span><br><span class="line">    <span class="keyword">if</span> (current != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        prev-&gt;next = current-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. Create a linked list named intList with at least five nodes.</span></span><br><span class="line">    ListNode* intList = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">insertAtEnd</span>(intList, i * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Print the elements of the linked list.</span></span><br><span class="line">    <span class="built_in">printList</span>(intList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. Insert a new node at the end of the linked list.</span></span><br><span class="line">    <span class="built_in">insertAtEnd</span>(intList, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Delete a node with a specific value from the linked list.</span></span><br><span class="line">    <span class="built_in">deleteNode</span>(intList, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the updated linked list.</span></span><br><span class="line">    <span class="built_in">printList</span>(intList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ create,duplicate queue</title>
      <link href="/2023/11/25/C-create-duplicate-queue/"/>
      <url>/2023/11/25/C-create-duplicate-queue/</url>
      
        <content type="html"><![CDATA[<h4 id="Task-2-Queue-Operations"><a href="#Task-2-Queue-Operations" class="headerlink" title="Task 2: Queue Operations"></a>Task 2: Queue Operations</h4><ol><li>Create a queue of characters named <strong>charQueue</strong>.</li><li>Enqueue at least four characters into the queue.</li><li>Print the elements of the queue.</li><li>Dequeue one element and print the updated queue.</li><li>Check if the queue is empty.</li><li>Implement a function to duplicate the elements in the queue.</li><li>Print the duplicated queue.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to print queue elements</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printQueue</span><span class="params">(<span class="type">const</span> std::queue&lt;<span class="type">char</span>&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Queue elements: &quot;</span>;</span><br><span class="line">    <span class="comment">// Since queue doesn&#x27;t provide direct access to elements,</span></span><br><span class="line">    <span class="comment">// we need to use a copy for printing without modifying the original queue</span></span><br><span class="line">    std::queue&lt;<span class="type">char</span>&gt; temp = q;</span><br><span class="line">    <span class="keyword">while</span> (!temp.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; temp.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        temp.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to duplicate the elements in the queue</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">duplicateQueue</span><span class="params">(std::queue&lt;<span class="type">char</span>&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">    std::queue&lt;<span class="type">char</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">char</span> frontElement = q.<span class="built_in">front</span>();</span><br><span class="line">        temp.<span class="built_in">push</span>(frontElement);</span><br><span class="line">        temp.<span class="built_in">push</span>(frontElement);</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q = temp; <span class="comment">// Assign the duplicated queue back to the original queue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Create a queue of characters named charQueue.</span></span><br><span class="line">    std::queue&lt;<span class="type">char</span>&gt; charQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Enqueue at least four characters into the queue.</span></span><br><span class="line">    charQueue.<span class="built_in">push</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    charQueue.<span class="built_in">push</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    charQueue.<span class="built_in">push</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    charQueue.<span class="built_in">push</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Print the elements of the queue.</span></span><br><span class="line">    <span class="built_in">printQueue</span>(charQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. Dequeue one element and print the updated queue.</span></span><br><span class="line">    charQueue.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">printQueue</span>(charQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. Check if the queue is empty.</span></span><br><span class="line">    <span class="keyword">if</span> (charQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Queue is empty.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Queue is not empty.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. Implement a function to duplicate the elements in the queue.</span></span><br><span class="line">    <span class="built_in">duplicateQueue</span>(charQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Print the duplicated queue.</span></span><br><span class="line">    <span class="built_in">printQueue</span>(charQueue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ create, print,reverse stack</title>
      <link href="/2023/11/25/C-create-print-reverse-stack/"/>
      <url>/2023/11/25/C-create-print-reverse-stack/</url>
      
        <content type="html"><![CDATA[<h4 id="TASK-1-Stack-Operations"><a href="#TASK-1-Stack-Operations" class="headerlink" title="TASK 1 Stack Operations"></a>TASK 1 Stack Operations</h4><ol><li>Create a stack of integers named <strong>intStack</strong>.</li><li>Push at least five integers onto the stack.</li><li>Print the elements of the stack.</li><li>Pop two elements from the stack and print the updated stack. </li><li>Check if the stack is empty.</li><li>Implement a function to reverse the elements in the stack. </li><li>Print the reversed stack.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to print stack elements</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStack</span><span class="params">(<span class="type">const</span> stack&lt;<span class="type">int</span>&gt;&amp; s)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Stack elements: &quot;</span>;</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; temp = s;</span><br><span class="line">    <span class="keyword">while</span> (!temp.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; temp.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        temp.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseStack</span><span class="params">(stack&lt;<span class="type">int</span>&gt;&amp; s)</span></span>&#123;</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        temp.<span class="built_in">push</span>(s.<span class="built_in">top</span>());</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    s = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// create a stack of integers named intStack.</span></span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; intStack;</span><br><span class="line">    <span class="comment">// push at least five integers onto the stack.</span></span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">    intStack.<span class="built_in">push</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printStack</span>(intStack);</span><br><span class="line">    <span class="comment">// pop two elements from the stack and print the updated stack.</span></span><br><span class="line"></span><br><span class="line">    intStack.<span class="built_in">pop</span>();</span><br><span class="line">    intStack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">printStack</span>(intStack);</span><br><span class="line">    <span class="comment">// check if the stack is empty.</span></span><br><span class="line">    <span class="keyword">if</span>(intStack.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;stack is empty&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;stack is not empty&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// implement a function to reverse the elemnts in ths stack.</span></span><br><span class="line">    <span class="built_in">reverseStack</span>(intStack);</span><br><span class="line">    <span class="comment">// print the reversed stack.</span></span><br><span class="line">    <span class="built_in">printStack</span>(intStack);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>YOOBEE-WEEK2-ACTIVITY</title>
      <link href="/2023/11/17/YOOBEE-WEEK2-ACTIVITY/"/>
      <url>/2023/11/17/YOOBEE-WEEK2-ACTIVITY/</url>
      
        <content type="html"><![CDATA[<h2 id="Control-structure"><a href="#Control-structure" class="headerlink" title="Control structure"></a>Control structure</h2><h3 id="a-Write-a-C-program-to-check-whether-a-given-number-is-even-or-odd-using-the-if-statement"><a href="#a-Write-a-C-program-to-check-whether-a-given-number-is-even-or-odd-using-the-if-statement" class="headerlink" title="a.Write a C++ program to check whether a given number is even or odd using the if statement."></a>a.Write a C++ program to check whether a given number is even or odd using the if statement.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;enter a number&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; number;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;you input &quot;</span> &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(number%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; number &lt;&lt; <span class="string">&quot; is even&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; number &lt;&lt; <span class="string">&quot; is odd&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-Create-a-program-that-prompts-the-user-for-their-age-and-displays-whether-they-are-a-child-teenager-or-adult-using-the-if-else-statement"><a href="#b-Create-a-program-that-prompts-the-user-for-their-age-and-displays-whether-they-are-a-child-teenager-or-adult-using-the-if-else-statement" class="headerlink" title="b. Create a program that prompts the user for their age and displays whether they are a child, teenager, or adult using the if-else statement."></a>b. Create a program that prompts the user for their age and displays whether they are a child, teenager, or adult using the if-else statement.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;enter his/her age&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; number;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;you input &quot;</span> &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(number&lt;=<span class="number">8</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; his/her is a child&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(number&gt;<span class="number">8</span>&amp;&amp;number&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; his/her is a teenager&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; his/her is an adult&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-Implement-a-menu-driven-program-that-performs-basic-arithmetic-operations-addition-subtraction-multiplication-division-based-on-user-input-Use-a-switch-statement-for-the-menu-selection"><a href="#c-Implement-a-menu-driven-program-that-performs-basic-arithmetic-operations-addition-subtraction-multiplication-division-based-on-user-input-Use-a-switch-statement-for-the-menu-selection" class="headerlink" title="c. Implement a menu-driven program that performs basic arithmetic operations (addition, subtraction, multiplication, division) based on user input. Use a switch statement for the menu selection."></a>c. Implement a menu-driven program that performs basic arithmetic operations (addition, subtraction, multiplication, division) based on user input. Use a switch statement for the menu selection.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> operation;</span><br><span class="line">    <span class="type">int</span> number1, number2;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;menu \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;1, addition&quot;</span> ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;2, subtraction&quot;</span> ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;3, multiplication&quot;</span> ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;4, division&quot;</span> ;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please select the type of operation(1-4)&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; operation;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the first number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number1;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the second number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number2;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(operation)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1+number2 &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1-number2 &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1*number2 &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(number2==<span class="number">0</span>)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Error: Division by zero is undefined.\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1/number2 &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Please input a number between 1-4.\n&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conditional-statements"><a href="#Conditional-statements" class="headerlink" title="Conditional statements"></a>Conditional statements</h2><h3 id="a-Write-a-program-that-takes-three-integer-inputs-and-finds-the-largest-of-the-three-using-if-else-statements"><a href="#a-Write-a-program-that-takes-three-integer-inputs-and-finds-the-largest-of-the-three-using-if-else-statements" class="headerlink" title="a. Write a program that takes three integer inputs and finds the largest of the three using if-else statements."></a>a. Write a program that takes three integer inputs and finds the largest of the three using if-else statements.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number1, number2, number3;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the first number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number1;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the second number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number2;</span><br><span class="line">    <span class="keyword">if</span>(number2&gt;=number1)&#123;</span><br><span class="line">        temp=number2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        temp=number2;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the third number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number3;</span><br><span class="line">     <span class="keyword">if</span>(temp&gt;=number3)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the largest number is &quot;</span>&lt;&lt; temp &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the largest number is &quot;</span>&lt;&lt; number3 &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-Create-a-simple-calculator-program-that-allows-the-user-to-input-two-numbers-and-an-arithmetic-operator-or-to-perform-the-operation-using-if-else-statements"><a href="#b-Create-a-simple-calculator-program-that-allows-the-user-to-input-two-numbers-and-an-arithmetic-operator-or-to-perform-the-operation-using-if-else-statements" class="headerlink" title="b. Create a simple calculator program that allows the user to input two numbers and an arithmetic operator (+, -, *, or &#x2F;) to perform the operation using if-else statements."></a>b. Create a simple calculator program that allows the user to input two numbers and an arithmetic operator (+, -, *, or &#x2F;) to perform the operation using if-else statements.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number1, number2;</span><br><span class="line">    <span class="type">char</span> operation;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the first number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number1;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input an arithmetic operator&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; operation ;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;please input the second number&quot;</span> ;</span><br><span class="line">    std::cin &gt;&gt; number2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(operation==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1 + number2 &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(operation==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1 - number2 &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(operation==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1 * number2 &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(operation==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(number2==<span class="number">0</span>)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Error: Division by zero is undefined&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;the result is &quot;</span>&lt;&lt; number1/number2 &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;please input a correct arithmetic operator&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-Write-a-program-to-determine-the-type-of-a-given-character-uppercase-letter-lowercase-letter-digit-special-character-using-if-else-statements"><a href="#c-Write-a-program-to-determine-the-type-of-a-given-character-uppercase-letter-lowercase-letter-digit-special-character-using-if-else-statements" class="headerlink" title="c. Write a program to determine the type of a given character (uppercase letter, lowercase letter, digit, special character) using if-else statements."></a>c. Write a program to determine the type of a given character (uppercase letter, lowercase letter, digit, special character) using if-else statements.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> inputChar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt the user to enter a character</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter a character: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; inputChar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the type of the character using if-else statements</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isalpha</span>(inputChar)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isupper</span>(inputChar)) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Uppercase letter\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Lowercase letter\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(inputChar)) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Digit\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Special character\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Looping-Statements-while-do-while-for"><a href="#Looping-Statements-while-do-while-for" class="headerlink" title="Looping Statements(while, do-while, for)"></a>Looping Statements(while, do-while, for)</h2><h3 id="a-Write-a-C-program-to-print-the-first-10-natural-numbers-using-a-while-loop"><a href="#a-Write-a-C-program-to-print-the-first-10-natural-numbers-using-a-while-loop" class="headerlink" title="a. Write a C++ program to print the first 10 natural numbers using a while loop."></a>a. Write a C++ program to print the first 10 natural numbers using a while loop.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(number&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-Create-a-program-that-takes-an-integer-input-from-the-user-and-calculates-the-factorial-of-that-number-using-a-for-loop"><a href="#b-Create-a-program-that-takes-an-integer-input-from-the-user-and-calculates-the-factorial-of-that-number-using-a-for-loop" class="headerlink" title="b. Create a program that takes an integer input from the user and calculates the factorial of that number using a for loop."></a>b. Create a program that takes an integer input from the user and calculates the factorial of that number using a for loop.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> integer;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> factorial=<span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please enter a number&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; integer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(integer&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Please enter a correct number&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=integer; i++) &#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            factorial = factorial*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;the result of factorial(&quot;</span>&lt;&lt; integer &lt;&lt;<span class="string">&quot;) is &quot;</span> &lt;&lt; factorial &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-Write-a-program-that-uses-a-do-while-loop-to-ask-the-user-for-a-number-until-the-user-enters-a-negative-number"><a href="#c-Write-a-program-that-uses-a-do-while-loop-to-ask-the-user-for-a-number-until-the-user-enters-a-negative-number" class="headerlink" title="c. Write a program that uses a do-while loop to ask the user for a number until the user enters a negative number."></a>c. Write a program that uses a do-while loop to ask the user for a number until the user enters a negative number.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> integer;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Please enter a number&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cin &gt;&gt; integer;</span><br><span class="line">    &#125;<span class="keyword">while</span>(integer&gt;=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Break-and-Continue-Statements"><a href="#Break-and-Continue-Statements" class="headerlink" title="Break and Continue Statements"></a>Break and Continue Statements</h2><h3 id="a-Write-a-program-to-find-the-sum-of-all-positive-integers-entered-by-the-user-until-they-enter-a-negative-number-Use-a-break-statement-to-terminate-the-loop"><a href="#a-Write-a-program-to-find-the-sum-of-all-positive-integers-entered-by-the-user-until-they-enter-a-negative-number-Use-a-break-statement-to-terminate-the-loop" class="headerlink" title="a. Write a program to find the sum of all positive integers entered by the user until they enter a negative number. Use a break statement to terminate the loop."></a>a. Write a program to find the sum of all positive integers entered by the user until they enter a negative number. Use a break statement to terminate the loop.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// Prompt the user to enter an integer</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Enter an integer (negative to exit): &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; number;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if the entered number is negative</span></span><br><span class="line">        <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// Exit the loop if the number is negative</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the positive number to the sum</span></span><br><span class="line">        sum += number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the sum of positive integers</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sum of positive integers: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-Implement-a-program-that-prints-all-odd-numbers-from-1-to-50-but-skips-the-number-13-using-the-continue-statement"><a href="#b-Implement-a-program-that-prints-all-odd-numbers-from-1-to-50-but-skips-the-number-13-using-the-continue-statement" class="headerlink" title="b. Implement a program that prints all odd numbers from 1 to 50, but skips the number 13 using the continue statement."></a>b. Implement a program that prints all odd numbers from 1 to 50, but skips the number 13 using the continue statement.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">// Skip the number 13</span></span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-Create-a-simple-guessing-game-where-the-program-generates-a-random-number-between-1-and-100-and-the-user-has-to-guess-the-number-Use-a-break-statement-to-exit-the-loop-when-the-user-guesses-the-correct-number"><a href="#c-Create-a-simple-guessing-game-where-the-program-generates-a-random-number-between-1-and-100-and-the-user-has-to-guess-the-number-Use-a-break-statement-to-exit-the-loop-when-the-user-guesses-the-correct-number" class="headerlink" title="c. Create a simple guessing game where the program generates a random number between 1 and 100, and the user has to guess the number. Use a break statement to exit the loop when the user guesses the correct number."></a>c. Create a simple guessing game where the program generates a random number between 1 and 100, and the user has to guess the number. Use a break statement to exit the loop when the user guesses the correct number.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Seed the random number generator with the current time</span></span><br><span class="line">    std::<span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(std::<span class="built_in">time</span>(<span class="literal">nullptr</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate a random number between 1 and 100</span></span><br><span class="line">    <span class="type">int</span> secretNumber = std::<span class="built_in">rand</span>() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> guess;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main game loop</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// Prompt the user to guess the number</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Guess the number between 1 and 100: &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; guess;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if the guess is correct</span></span><br><span class="line">        <span class="keyword">if</span> (guess == secretNumber) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Congratulations! You guessed the correct number.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// Exit the loop if the guess is correct</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Provide a hint and continue the loop</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Wrong guess! Try again.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">if</span> (guess &lt; secretNumber) &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Hint: The secret number is greater.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Hint: The secret number is smaller.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode NO.2 Palindrome Number</title>
      <link href="/2023/11/03/Leetcode%20NO.2%20Palindrome%20Number/"/>
      <url>/2023/11/03/Leetcode%20NO.2%20Palindrome%20Number/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Givren an integer x , return true if x is a palindrome, and false otherwise.</p><p>Example 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Input</span>: x=<span class="number">121</span></span><br><span class="line"><span class="title class_">Output</span>: <span class="literal">true</span></span><br><span class="line"><span class="title class_">Explanation</span>: <span class="number">121</span> reads <span class="keyword">as</span> <span class="number">121</span> <span class="keyword">from</span> left to right and <span class="keyword">from</span> right to left.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Input</span>: x = -<span class="number">121</span></span><br><span class="line"><span class="title class_">Output</span>: <span class="literal">false</span></span><br><span class="line"><span class="title class_">Explanation</span>: <span class="title class_">From</span> left to right, it reads -<span class="number">121.</span> <span class="title class_">From</span> right to left, it becomes <span class="number">121</span>-. <span class="title class_">Therefore</span> it is not a palindrome.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Inout</span>: x = <span class="number">10</span></span><br><span class="line"><span class="title class_">Output</span>: <span class="literal">false</span></span><br><span class="line"><span class="title class_">Explanationg</span>: <span class="title class_">Reads</span> <span class="number">01</span> <span class="keyword">from</span> right to left. <span class="title class_">Therefore</span> it is not a palindrome.</span><br></pre></td></tr></table></figure><h2 id="Soulution"><a href="#Soulution" class="headerlink" title="Soulution"></a>Soulution</h2><h6 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1:"></a>Solution 1:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(x==<span class="title class_">Number</span>(y)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h6><p>The javascript method of array-reverse is used in this solution. And you need to change the data format from number to string first. Then split it into an array. But it has a risk about integer overflow when the x is reversed.</p><h6 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2:"></a>Solution 2:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x%<span class="number">10</span>==<span class="number">0</span>&amp;&amp;x!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> revertNumber = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(x&lt;revertNumber)&#123;</span><br><span class="line">    revertNumber = x*<span class="number">10</span>+x%<span class="number">10</span></span><br><span class="line">    x = x/<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x===revertNumber||x===revertNumber/<span class="number">10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation:"></a>Explanation:</h6><p>This solution avoid the risk of integer overflow. The key is to find the revertNumber using a loop. If x is an odd number and x is equal to revertNumber&#x2F;10(cause revertNumber has the middle number, so we must remove the middle number) after the while-loop , the function returns true. If x is an even number , we just judge whether x is equal to revertNumber after the while-loop.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Javascript </tag>
            
            <tag> Palindrome Number </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode NO.1 Two Sum</title>
      <link href="/2023/11/03/Leetcode%20NO.1%20Two%20Sum/"/>
      <url>/2023/11/03/Leetcode%20NO.1%20Two%20Sum/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p><p>You may assume that each input would have exactly on solution ,and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p>Example :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Input</span> :nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>],target = <span class="number">9</span></span><br><span class="line"><span class="title class_">Output</span>: [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="title class_">Explanation</span> : <span class="title class_">Because</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> , we <span class="keyword">return</span> [<span class="number">0</span>,<span class="number">1</span>].</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h6 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1:"></a>Solution 1:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="title function_">indexOf</span>(target-nums[i])!=-<span class="number">1</span>&amp;&amp;i!=nums.<span class="title function_">indexOf</span>(target-nums[i]))&#123;</span><br><span class="line">      <span class="keyword">return</span> [i,nums.<span class="title function_">indexOf</span>(target-nums[i])]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h6><p>This solution use the method, indexOf, to find the indice of the target.</p><h6 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2:"></a>Solution 2:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> diff = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(diff.<span class="title function_">has</span>(target-nums[i]))&#123;</span><br><span class="line">      <span class="keyword">return</span> [i,diff.<span class="title function_">get</span>(target-nums[i])]</span><br><span class="line">    &#125;</span><br><span class="line">    diff.<span class="title function_">set</span>(nums[i],i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation:"></a>Explanation:</h6><p>This solution use a data structure-map.It looks like the Object (key-value) in javascript. This solution is the best currently.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Two Sum </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/03/Hello%20World/"/>
      <url>/2023/11/03/Hello%20World/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
